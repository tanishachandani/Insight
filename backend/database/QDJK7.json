{"summary": "**NP Problems and NP Completeness**\n\n- **NP-Problems:**\n    - Problems where a solution can be verified in polynomial time\n    - Two categories:\n        - Decision problems: ask if a valid solution exists\n        - Optimization problems: ask for the best solution among all valid solutions\n\n- **Reductions:**\n    - Convert an instance of one problem to an instance of another problem\n    - Used to show that one problem is at least as hard as another\n\n- **NP-Completeness and NP-Hardness:**\n    - NP-Complete: Problems that are both NP and NP-Hard\n    - NP-Hard: Problems that can be reduced to an NP-Complete problem\n\n**SAT (Formula Satisfiability)**\n\n- **Problem:** Given a logical formula, determine if there is an assignment of Boolean variables that makes the formula true\n\n**Hamiltonian Cycle**\n\n- **Problem:** Given an undirected graph, determine if there is a cycle that visits every vertex exactly once\n\n**Zero-One Equations**\n\n- **Problem:** Given a system of linear equations where all variables and coefficients are either 0 or 1, determine if there is a solution that satisfies all equations\n\n**Knapsack**\n\n- **Problem:** Given a set of items with weights and values, and a knapsack with a maximum weight capacity, determine the maximum value of items that can be packed into the knapsack without exceeding the capacity\n\n**Brute Force Algorithms**\n\n- Naive algorithms that consider all possible solutions and return the best one\n- Typically inefficient for large problems\n\n**P vs. NP**\n\n- **Question:** Are all NP problems solvable in polynomial time?\n- **Answer:** Unknown\n    - If P = NP, all NP problems would have efficient solutions\n    - If P \u2260 NP, some NP problems would be inherently difficult\n\n**Hard Problems**\n\n- Problems that are believed to be difficult, based on decades of unsuccessful attempts to find efficient algorithms\n\n- **Identification:**\n    - Search for efficient algorithms\n    - Attempt to prove that the problem is NP-Complete or NP-Hard\n\n**Reductions (Formal Definition)**\n\n- Reduction from problem A to problem B:\n    - Convert an instance of A to an instance of B\n    - Solve the instance of B\n    - Use the solution of B to solve the instance of A\n- If there is a polynomial-time reduction from A to B, then A is at least as hard as B", "flash_cards": [["What is the complexity of SAT?", "NP"], ["What is one application of SAT?", "Circuit Design"], ["What is the problem with General Knapsack based on weights?", "If weights are allowed to be large (written in binary), don\u2019t have a good algorithm."], ["What is one consequence if P = NP?", "Every NP problem has a reasonably efficient solution."], ["What type of problems are NP-Complete examples of?", "Decision problems"], ["What is one problem that is NP-Complete?", "Formula SAT"], ["What is the difference between an NP-Complete and an NP-Hard problem?", "Decision problems can be NP -Complete. For optimization problems, it is called NP-Hard."], ["What is one reduction used to prove that one problem is at least as hard as another?", "Hamiltonian Cycle \u2192 TSP"], ["What is the significance of Circuit SAT?", "Any NP decision problem \u2192 Circuit SAT"], ["What is the relationship between NP-Complete problems and polynomial time algorithms?", "If we find a polynomial time algorithm for Circuit -SAT, we have a polynomial time algorithm for all NP problems!"]], "quiz": [{"question": "What is the $1,000,000 Question in computer science?", "possible_answers": ["Is P = NP?", "Is there a cure for cancer?", "Can we travel faster than the speed of light?", "What is the meaning of life?", "Is there life on other planets?"], "index": 0}, {"question": "What is the name of the problem where we are given a set of items, each with a weight and a value, and we want to find the subset of items that has the highest total value while not exceeding a certain total weight?", "possible_answers": ["Knapsack", "Hamiltonian cycle", "Travelling salesman", "Maximum independent set", "Zero-one equations"], "index": 0}, {"question": "What is the significance of finding a polynomial time algorithm for an NP-Complete problem?", "possible_answers": ["It would have no significant implications", "It would prove that P = NP", "It would disprove the existence of NP-Hard problems", "It would win you a Nobel Prize", "It would make all NP-Complete problems easy to solve"], "index": 1}, {"question": "What is one application of SAT?", "possible_answers": ["Any NP decision problem \u2192 Circuit SAT", "Hamiltonian Cycle \u2192 TSP", "Circuit Design", "Decision problems can be NP -Complete. For optimization problems, it is called NP-Hard."], "index": 2}, {"question": "What is the time complexity of a brute force search algorithm for an NP problem?", "possible_answers": ["Polynomial", "Linear", "Constant", "Exponential", "Logarithmic"], "index": 3}, {"question": "What is one problem that is NP-Complete?", "possible_answers": ["If weights are allowed to be large (written in binary), don\u2019t have a good algorithm.", "Decision problems can be NP -Complete. For optimization problems, it is called NP-Hard.", "If we find a polynomial time algorithm for Circuit -SAT, we have a polynomial time algorithm for all NP problems!", "Formula SAT"], "index": 3}, {"question": "What type of problems are NP-Complete examples of?", "possible_answers": ["Any NP decision problem \u2192 Circuit SAT", "NP", "Decision problems", "Decision problems can be NP -Complete. For optimization problems, it is called NP-Hard."], "index": 2}, {"question": "Which of the following are NP -Decision problems? (Multiple correct answers)", "possible_answers": ["Travelling Salesman", "Hamiltonian Cycle", "Maximum Independent Set", "General Knapsack", "SAT"], "index": 1}, {"question": "What is the problem with General Knapsack based on weights?", "possible_answers": ["Circuit Design", "Hamiltonian Cycle \u2192 TSP", "Any NP decision problem \u2192 Circuit SAT", "If weights are allowed to be large (written in binary), don\u2019t have a good algorithm."], "index": 3}, {"question": "Which of the following problems is NP-Hard?", "possible_answers": ["Vertex cover", "Travelling salesman", "Maximum clique", "Satisfiability", "Independent set"], "index": 1}, {"question": "Hamiltonian Cycle \u2192 TSP", "possible_answers": ["What type of problems are NP-Complete examples of?", "What is one reduction used to prove that one problem is at least as hard as another?", "What is the relationship between NP-Complete problems and polynomial time algorithms?", "What is one problem that is NP-Complete?"], "index": 1}, {"question": "Decision problems can be NP -Complete. For optimization problems, it is called NP-Hard.", "possible_answers": ["What type of problems are NP-Complete examples of?", "What is the complexity of SAT?", "What is the problem with General Knapsack based on weights?", "What is the difference between an NP-Complete and an NP-Hard problem?"], "index": 3}, {"question": "If we find a polynomial time algorithm for Circuit -SAT, we have a polynomial time algorithm for all NP problems!", "possible_answers": ["What is the relationship between NP-Complete problems and polynomial time algorithms?", "What is the complexity of SAT?", "What is the problem with General Knapsack based on weights?", "What is the significance of Circuit SAT?"], "index": 0}, {"question": "Which of the following can be used to prove that one problem is at least as hard as another?", "possible_answers": ["Dynamic programming", "Extrapolation", "Interpolation", "Reductions", "Brute force search"], "index": 3}, {"question": "Which of the following is NOT a characteristic of NP problems?", "possible_answers": ["They can be solved efficiently for small input sizes", "They are hard to solve", "They are optimization problems", "They are decision problems", "They have a nondeterministic polynomial time algorithm"], "index": 0}, {"question": "Which of the following problems is NP-Complete?", "possible_answers": ["Formula SAT", "Huffman coding", "Longest common subsequence", "Knapsack", "Minimum spanning trees"], "index": 0}, {"question": "What is the significance of Circuit SAT?", "possible_answers": ["Any NP decision problem \u2192 Circuit SAT", "Formula SAT", "If we find a polynomial time algorithm for Circuit -SAT, we have a polynomial time algorithm for all NP problems!", "Decision problems can be NP -Complete. For optimization problems, it is called NP-Hard."], "index": 0}, {"question": "What is the difference between NP-Complete and NP-Hard problems?", "possible_answers": ["NP-Complete problems are harder than NP-Hard problems", "NP-Hard problems are easier than NP-Complete problems", "NP-Hard problems are a subset of NP-Complete problems", "NP-Complete problems are a subset of NP-Hard problems", "There is no difference between NP-Complete and NP-Hard problems"], "index": 3}, {"question": "What is one consequence if P = NP?", "possible_answers": ["Hamiltonian Cycle \u2192 TSP", "If weights are allowed to be large (written in binary), don\u2019t have a good algorithm.", "Circuit Design", "Every NP problem has a reasonably efficient solution."], "index": 3}, {"question": "NP", "possible_answers": ["What is the complexity of SAT?", "What is the difference between an NP-Complete and an NP-Hard problem?", "What is one reduction used to prove that one problem is at least as hard as another?", "What is the significance of Circuit SAT?"], "index": 0}], "title": "NP Completeness", "id": "QDJK7"}
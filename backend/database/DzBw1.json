{"summary": "**Overview**\n\n* Homework assignments and exam information\n* Discussion of NP-Completeness\n\n**NP-Problems**\n\n* **Definition:** Decision problems that can be verified in polynomial time\n* Examples include:\n    * Formula SAT (satisfiability)\n    * Hamiltonian Cycle\n    * Zero-One Equations\n    * Knapsack\n\n**Reductions**\n\n* **Definition:** Transformation of one problem into another\n* Shows that one problem is at least as hard as another\n* If Problem A can be reduced to Problem B, and Problem B has a polynomial-time algorithm, then Problem A also has a polynomial-time algorithm.\n\n**NP-Completeness & NP-Hardness**\n\n* **NP-Complete problems:** NP-problems that are at least as hard as any other NP-problem\n* **NP-Hard problems:** Optimization versions of NP-problems that are at least as hard as any other NP-problem\n\n**Specific NP-Complete Problems**\n\n* **SAT (Formula SAT):** Given a logical formula, determine if there is an assignment that makes it true\n* **Hamiltonian Cycle:** Given a graph, determine if there is a cycle that visits every vertex exactly once\n* **Zero-One Equations:** Given a system of linear equations with Boolean variables, determine if there is a solution\n* **Knapsack:** Given a set of items with weights and values, determine the subset that maximizes total value without exceeding a given weight capacity\n\n**Brute Force Algorithms**\n\n* Naive algorithms that examine all possible solutions\n* Inefficient for large-scale problems\n\n**P vs. NP**\n\n* **Question:** Does every NP-problem have a polynomial-time algorithm?\n* Most computer scientists believe that P \u2260 NP (i.e., not all NP-problems have efficient algorithms)\n\n**Hard Problems**\n\n* Some NP-problems appear to be particularly difficult\n* Determining the difficulty of a problem can be challenging\n\n**Reductions (Detailed)**\n\n* **Process:**\n    * Take an instance of Problem A\n    * Create an instance of Problem B\n    * Show that if Problem B can be solved, then Problem A can also be solved using the solution to Problem B\n* **Example: Hamiltonian Cycle \u2192 TSP**\n    * Create a TSP instance with edge costs such that a Hamiltonian cycle in Problem A corresponds to a TSP cycle of cost |V| in Problem B\n* **Significance:** If Problem A can be reduced to Problem B, and Problem B is NP-Complete, then Problem A is also NP-Complete.", "flash_cards": [["NP-Completeness", "A problem in NP that is at least as hard as any other problem in NP."], ["NP", "Nondeterministic Polynomial time."], ["SAT", "Satisfiability problem."], ["Hamiltonian Cycle", "A cycle that visits every vertex in a graph exactly once."], ["Circuit SAT", "Given a circuit with Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1."], ["NP-Hard", "An optimization problem that is at least as hard as any other problem in NP."], ["Brute Force Algorithm", "An algorithm that considers every possible answer and returns the best one."], ["Polynomial Time", "An algorithm that runs in polynomial time."], ["Reduction", "A method for proving that one problem is at least as hard as another."], ["NP-Complete Problem", "A problem in NP that is at least as hard as any other problem in NP."]], "quiz": [{"question": "NP-Hard", "possible_answers": ["Satisfiability problem.", "An algorithm that considers every possible answer and returns the best one.", "An optimization problem that is at least as hard as any other problem in NP.", "A cycle that visits every vertex in a graph exactly once."], "index": 2}, {"question": "What is an NP-Complete problem?", "possible_answers": ["A problem that is in P.", "A problem in NP that is at least as hard as any other problem in NP.", "A problem that is not in NP.", "A problem in NP that is easier than any other problem in NP."], "index": 1}, {"question": "Nondeterministic Polynomial time.", "possible_answers": ["NP", "NP-Completeness", "Reduction", "Polynomial Time"], "index": 0}, {"question": "What is a reduction?", "possible_answers": ["A method for transforming one problem into another.", "A method for proving that one problem is easier than another.", "A method for finding a solution to one problem by solving another problem.", "A method for proving that one problem is at least as hard as another."], "index": 3}, {"question": "What is a polynomial time algorithm?", "possible_answers": ["An algorithm that runs in time proportional to the factorial of the size of the input.", "An algorithm that runs in time proportional to the square of the size of the input.", "An algorithm that runs in time proportional to the cube of the size of the input.", "An algorithm that runs in time proportional to the size of the input."], "index": 3}, {"question": "Reduction", "possible_answers": ["A method for proving that one problem is at least as hard as another.", "An optimization problem that is at least as hard as any other problem in NP.", "Satisfiability problem.", "A problem in NP that is at least as hard as any other problem in NP."], "index": 0}, {"question": "Brute Force Algorithm", "possible_answers": ["An algorithm that considers every possible answer and returns the best one.", "An optimization problem that is at least as hard as any other problem in NP.", "A cycle that visits every vertex in a graph exactly once.", "A method for proving that one problem is at least as hard as another."], "index": 0}, {"question": "What is an NP-Hard problem?", "possible_answers": ["A problem that is at least as hard as any NP-Complete problem.", "A problem that is not in NP.", "A problem that is in P.", "A problem that is easier than any NP-Complete problem."], "index": 0}, {"question": "Polynomial Time", "possible_answers": ["An optimization problem that is at least as hard as any other problem in NP.", "A method for proving that one problem is at least as hard as another.", "An algorithm that considers every possible answer and returns the best one.", "An algorithm that runs in polynomial time."], "index": 3}, {"question": "A problem in NP that is at least as hard as any other problem in NP.", "possible_answers": ["NP-Complete Problem", "NP-Completeness", "Polynomial Time", "SAT"], "index": 0}, {"question": "Which of the following is an NP-Hard optimization problem?", "possible_answers": ["TSP", "Hamiltonian Cycle", "Maximum Independent Set", "Formula SAT"], "index": 1}, {"question": "What is the Circuit SAT problem?", "possible_answers": ["Given a circuit, determine if there is a set of inputs that give output 1.", "Given a circuit, determine the number of inputs that give output 1.", "Given a circuit, determine if there is a set of inputs that give output 0.", "Given a circuit, determine the output for a given set of inputs."], "index": 0}, {"question": "Hamiltonian Cycle", "possible_answers": ["A problem in NP that is at least as hard as any other problem in NP.", "A cycle that visits every vertex in a graph exactly once.", "A problem in NP that is at least as hard as any other problem in NP.", "An algorithm that runs in polynomial time."], "index": 1}, {"question": "What is the difference between NP-Decision and NP-Optimization problems?", "possible_answers": ["NP-Decision problems ask if there is a solution, while NP-Optimization problems ask for the best solution.", "NP-Optimization problems ask if there is a solution, while NP-Decision problems ask for the best solution.", "NP-Decision problems are harder than NP-Optimization problems.", "There is no difference between NP-Decision and NP-Optimization problems."], "index": 0}, {"question": "What is a brute force search algorithm?", "possible_answers": ["An algorithm that uses a divide-and-conquer strategy to find the best solution.", "An algorithm that uses a binary search to find the best solution.", "An algorithm that uses a heuristic to find a good solution.", "An algorithm that considers every possible answer and returns the best one."], "index": 3}, {"question": "Which of the following is an NP-Decision problem? (Multiple correct answers)", "possible_answers": ["Hamiltonian Cycle", "SAT", "Travelling Salesman", "Maximum Independent Set", "General Knapsack"], "index": 4}, {"question": "What is the $1,000,000 Question?", "possible_answers": ["Is P = NP?", "Is NP = P?", "Is P NP-Complete?", "Is NP NP-Hard?"], "index": 0}, {"question": "NP-Completeness", "possible_answers": ["An algorithm that considers every possible answer and returns the best one.", "A problem in NP that is at least as hard as any other problem in NP.", "Nondeterministic Polynomial time.", "An algorithm that runs in polynomial time."], "index": 1}, {"question": "Circuit SAT", "possible_answers": ["Nondeterministic Polynomial time.", "A cycle that visits every vertex in a graph exactly once.", "Given a circuit with Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1.", "A problem in NP that is at least as hard as any other problem in NP."], "index": 2}, {"question": "Satisfiability problem.", "possible_answers": ["NP-Hard", "SAT", "Hamiltonian Cycle", "Circuit SAT"], "index": 1}], "title": "NP-Completeness", "id": "DzBw1"}
{"summary": "**Overview**\n\n- Announcements: Homework 5 due today; Exam 3 next week.\n- Topic: NP-Completeness (Chapter 8)\n\n**NP Problems**\n\n- **Definition:** Problems that can be decided in nondeterministic polynomial time (Polynomial time with unlimited processing power).\n- **Examples:** SAT, TSP, Hamiltonian Cycle, Knapsack, Maximum Independent Set\n\n**Reductions**\n\n- Method for proving that one problem is at least as hard as another.\n- **Process:** Show that if there is an algorithm for solving problem A, then it can be used to solve problem B.\n- **Example:** Hamilton Cycle \u2192 TSP\n\n**NP-Completeness and NP-Hardness**\n\n- **NP-Complete Problems:** Decision problems in NP that are at least as hard as any other problem in NP.\n- **NP-Hard Problems:** Optimization problems that are at least as hard as any other problem in NP.\n- **Significance:** If any NP-Complete problem is hard, then all NP problems are hard.\n\n**Examples of NP-Complete/Hard Problems**\n\n- **Decision Problems:**\n    - SAT (Formula SAT)\n    - Hamiltonian Cycle\n    - Zero-One Equations\n- **Optimization Problems:**\n    - Knapsack\n    - Maximum Independent Set\n\n**Brute Force Algorithms**\n\n- Na\u00efve algorithms that consider every possible solution.\n- Usually inefficient for NP problems.\n\n**P vs. NP**\n\n- **Question:** Is P (polynomial time algorithms) equal to NP?\n- If P = NP, every NP problem would have a reasonably efficient solution.\n- If P \u2260 NP, some NP problems are fundamentally difficult.\n\n**Hard Problems**\n\n- **Characteristics:**\n    - No known efficient algorithms despite decades of research.\n    - Difficulty can be related to other problems through reductions.\n\n**Circuit SAT**\n\n- Problem: Given a circuit with Boolean inputs and outputs, determine if there is an input that produces output 1.\n- Any NP decision problem can be reduced to Circuit SAT.\n\n**Important Reduction**\n\n- Any NP decision problem \u2192 Circuit SAT", "flash_cards": [["NP", "Nondeterministic Polynomial time"], ["SAT", "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean variables, is there an assignment to the variables that causes the formula to be true?"], ["TSP", "Given a set of graph nodes, where the weight of each edge equals the cost, find the cheapest tour that visits each node exactly once before returning to the starting node, or state that no such tour exists"], ["Reduction", "A method for proving that one problem is at least as hard as another."], ["Circuit SAT", "Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1"], ["NP-Complete", "A problem in NP that is at least as hard as any other problem in NP"], ["Brute Force", "An algorithm that considers every possible answer and returns the best one"], ["Optimization Problem", "An NP problem that asks for the object that maximizes (or minimizes) some polynomial time -computable objective"], ["Knapsack", "Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible"], ["Decision Problem", "An NP problem that asks if there is some object that satisfies a polynomial time -checkable property"]], "quiz": [{"question": "How do we prove that one problem is at least as hard as another?", "possible_answers": ["Reductions"], "index": 0}, {"question": "What is a problem that appears to be hard in practice?", "possible_answers": ["Hamiltonian Cycle", "Knapsack", "TSP"], "index": 1}, {"question": "Brute Force", "possible_answers": ["An algorithm that considers every possible answer and returns the best one", "Given a set of graph nodes, where the weight of each edge equals the cost, find the cheapest tour that visits each node exactly once before returning to the starting node, or state that no such tour exists", "An NP problem that asks if there is some object that satisfies a polynomial time -checkable property", "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean variables, is there an assignment to the variables that causes the formula to be true?"], "index": 0}, {"question": "Nondeterministic Polynomial time", "possible_answers": ["Reduction", "Circuit SAT", "NP", "Knapsack"], "index": 2}, {"question": "A method for proving that one problem is at least as hard as another.", "possible_answers": ["Knapsack", "NP-Complete", "Reduction", "TSP"], "index": 2}, {"question": "What is the important reduction mentioned in the text?", "possible_answers": ["Any NP decision problem can be reduced to Circuit SAT"], "index": 0}, {"question": "What is the key idea behind showing a problem is NP-Complete?", "possible_answers": ["Finding reductions from other NP-Hard/Complete problems"], "index": 0}, {"question": "NP-Complete", "possible_answers": ["An NP problem that asks if there is some object that satisfies a polynomial time -checkable property", "Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1", "A problem in NP that is at least as hard as any other problem in NP", "Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible"], "index": 2}, {"question": "Given a set of graph nodes, where the weight of each edge equals the cost, find the cheapest tour that visits each node exactly once before returning to the starting node, or state that no such tour exists", "possible_answers": ["NP-Complete", "SAT", "Circuit SAT", "TSP"], "index": 3}, {"question": "What is brute force search?", "possible_answers": ["An algorithm that considers every possible answer and returns the best one."], "index": 0}, {"question": "Circuit SAT", "possible_answers": ["Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1", "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean variables, is there an assignment to the variables that causes the formula to be true?", "Nondeterministic Polynomial time", "A problem in NP that is at least as hard as any other problem in NP"], "index": 0}, {"question": "What is another name for NP-Complete for optimization problems?", "possible_answers": ["NP-Hard"], "index": 0}, {"question": "What is the first NP-Complete problem introduced in the text?", "possible_answers": ["Circuit SAT"], "index": 0}, {"question": "Is P = NP?", "possible_answers": ["No, some NP problems are fundamentally difficult.", "We don't know.", "Yes, every NP problem has a reasonably efficient solution."], "index": 0}, {"question": "Decision Problem", "possible_answers": ["An NP problem that asks for the object that maximizes (or minimizes) some polynomial time -computable objective", "Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1", "An NP problem that asks if there is some object that satisfies a polynomial time -checkable property", "Given a set of graph nodes, where the weight of each edge equals the cost, find the cheapest tour that visits each node exactly once before returning to the starting node, or state that no such tour exists"], "index": 2}, {"question": "Which of the following are NP-Decision problems?", "possible_answers": ["Maximum Independent Set", "General Knapsack", "Travelling Salesman", "SAT", "Hamiltonian Cycle"], "index": 3}, {"question": "What are NP problems?", "possible_answers": ["Problems that can be solved in nondeterministic polynomial time"], "index": 0}, {"question": "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean variables, is there an assignment to the variables that causes the formula to be true?", "possible_answers": ["Knapsack", "Circuit SAT", "SAT", "TSP"], "index": 2}, {"question": "Knapsack", "possible_answers": ["An NP problem that asks if there is some object that satisfies a polynomial time -checkable property", "Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1", "Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible", "An NP problem that asks for the object that maximizes (or minimizes) some polynomial time -computable objective"], "index": 2}, {"question": "An NP problem that asks for the object that maximizes (or minimizes) some polynomial time -computable objective", "possible_answers": ["NP", "Decision Problem", "SAT", "Optimization Problem"], "index": 3}], "title": "NP-Completeness and NP-Hardness", "id": "zhgGT"}
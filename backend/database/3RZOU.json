{"summary": "**Overview**\n\nThis transcript covers NP-Completeness, a concept in computer science that describes the difficulty of certain computational problems.\n\n**NP Problems**\n\n- Nondeterministic Polynomial time (NP) problems are those where there is some algorithm that can check if a solution is correct in polynomial time.\n\n- NP-Decision problems ask if there is an object satisfying a polynomial time-checkable property.\n\n- NP-Optimization problems ask for the object that maximizes or minimizes some polynomial time-computable objective.\n\n**Examples of NP Problems**\n\n- SAT (Formula Satisfiability)\n- TSP (Traveling Salesman Problem)\n- Hamiltonian Cycle\n- Knapsack\n- Maximum Independent Set\n\n**Brute Force Algorithms**\n\n- Brute force algorithms consider all possible answers and return the best one.\n- Although there are brute force algorithms for almost every NP problem, they are usually inefficient.\n\n**Reductions**\n\n- Reductions are a method for proving that one problem is at least as hard as another.\n- By showing that there is a reduction from problem A to problem B, we can conclude that if there is an efficient algorithm for B, there must also be an efficient algorithm for A.\n\n**NP-Completeness & NP-Hardness**\n\n- Circuit SAT is an NP-Complete problem, meaning that it is at least as hard as any other problem in NP.\n- If there were a polynomial time algorithm for Circuit SAT, then there would be polynomial time algorithms for all NP problems.\n- Other problems that have been shown to be NP-Complete/Hard include:\n    - Formula SAT\n    - Maximum Independent Set\n    - TSP\n    - Hamiltonian Cycle\n    - Knapsack", "flash_cards": [["Exam 3 next week", "Topics: Huffman codes, MSTs, Dynamic Programming, LCSS/Knapsack/CMM/All -pairs shortest path/MIS in trees/Travelling salesman"], ["NP", "Nondeterministic Polynomial time"], ["NP-Decision problems", "Ask if there is some object that satisfies a polynomial time -checkable property"], ["NP-Optimization problems", "Ask for the object that maximizes (or minimizes) some polynomial time -computable objective"], ["Reduction", "A method for proving that one problem is at least as hard as another"], ["Circuit SAT", "Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1"], ["NP-Complete", "A problem in NP that is at least as hard as any other problem in NP"], ["NP-Hard", "For optimization problems, it is called NP-Hard"], ["Zero-One Equations", "Maximize the number of variables with value 0"], ["NP-Decision Problem", "Ask if there is some object that satisfies a polynomial time-checkable property"]], "quiz": [{"question": "Which of the following are NP -Decision problems?", "possible_answers": ["General Knapsack", "Hamiltonian Cycle", "Maximum Independent Set", "SAT", "Travelling Salesman"], "index": 2}, {"question": "Ask if there is some object that satisfies a polynomial time-checkable property", "possible_answers": ["NP-Complete", "Exam 3 next week", "NP-Decision Problem", "Reduction"], "index": 2}, {"question": "For optimization problems, it is called NP-Hard", "possible_answers": ["Exam 3 next week", "Reduction", "NP-Decision problems", "NP-Hard"], "index": 3}, {"question": "What is a reduction in the context of NP-Completeness?", "possible_answers": ["A way to prove that one problem is at least as hard as another", "A way to make a problem easier to solve", "A way to reduce the size of an instance of a problem", "A way to show that two problems are equivalent", "A way to find a polynomial time algorithm for an NP-Hard problem"], "index": 0}, {"question": "What is the significance of the Hamiltonian Cycle \u2192 TSP reduction?", "possible_answers": ["It shows that Hamiltonian Cycle can be solved in polynomial time if TSP can be solved in polynomial time", "It shows that TSP and Hamiltonian Cycle are equivalent problems", "It shows that TSP can be solved in polynomial time if Hamiltonian Cycle can be solved in polynomial time", "It shows that Hamiltonian Cycle is at least as hard as TSP", "It shows that TSP is at least as hard as Hamiltonian Cycle"], "index": 4}, {"question": "Topics: Huffman codes, MSTs, Dynamic Programming, LCSS/Knapsack/CMM/All -pairs shortest path/MIS in trees/Travelling salesman", "possible_answers": ["Zero-One Equations", "Exam 3 next week", "NP", "NP-Complete"], "index": 1}, {"question": "Which of the following is NOT an NP-Complete problem?", "possible_answers": ["Knapsack", "Formula SAT", "Minimum Spanning Tree", "Hamiltonian Cycle", "Maximum Independent Set"], "index": 2}, {"question": "NP-Optimization problems", "possible_answers": ["Ask if there is some object that satisfies a polynomial time-checkable property", "Ask for the object that maximizes (or minimizes) some polynomial time -computable objective", "Nondeterministic Polynomial time", "Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1"], "index": 1}, {"question": "NP", "possible_answers": ["Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1", "Nondeterministic Polynomial time", "A method for proving that one problem is at least as hard as another", "Maximize the number of variables with value 0"], "index": 1}, {"question": "Maximize the number of variables with value 0", "possible_answers": ["NP-Decision Problem", "Reduction", "Circuit SAT", "Zero-One Equations"], "index": 3}, {"question": "What is the significance of Circuit SAT in the theory of NP-Completeness?", "possible_answers": ["It is the only NP-Complete problem that can be solved in polynomial time", "It is a universal NP-Complete problem", "It is the hardest NP-Complete problem", "It can be used to reduce any NP-Hard problem to an NP-Complete problem", "It is the first NP-Complete problem to be discovered"], "index": 3}, {"question": "Reduction", "possible_answers": ["Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1", "A method for proving that one problem is at least as hard as another", "Ask if there is some object that satisfies a polynomial time-checkable property", "Topics: Huffman codes, MSTs, Dynamic Programming, LCSS/Knapsack/CMM/All -pairs shortest path/MIS in trees/Travelling salesman"], "index": 1}, {"question": "What is a brute force algorithm?", "possible_answers": ["An algorithm that considers every possible solution", "An algorithm that uses recursion to find the best solution", "An algorithm that uses backtracking to find the best solution", "An algorithm that uses divide and conquer to find the best solution", "An algorithm that uses dynamic programming to find the best solution"], "index": 0}, {"question": "NP-Complete", "possible_answers": ["Nondeterministic Polynomial time", "A method for proving that one problem is at least as hard as another", "Topics: Huffman codes, MSTs, Dynamic Programming, LCSS/Knapsack/CMM/All -pairs shortest path/MIS in trees/Travelling salesman", "A problem in NP that is at least as hard as any other problem in NP"], "index": 3}, {"question": "What is the goal of the NP-Completeness theory?", "possible_answers": ["To classify NP-Hard problems into different levels of difficulty", "To develop new methods for solving NP-Hard problems", "To find polynomial time algorithms for NP-Complete problems", "To prove that P = NP", "To show that some problems are fundamentally difficult to solve"], "index": 4}, {"question": "What is the $1,000,000 Question?", "possible_answers": ["Is Hamiltonian Cycle easier than TSP?", "Is P = NP?", "Can we reduce any NP-Hard problem to Formula SAT?", "Can we find a polynomial time algorithm for Circuit SAT?", "Is there a better algorithm than brute force for every NP problem?"], "index": 1}, {"question": "Ask if there is some object that satisfies a polynomial time -checkable property", "possible_answers": ["NP", "NP-Optimization problems", "Reduction", "NP-Decision problems"], "index": 3}, {"question": "What is the difference between NP-Decision and NP-Optimization problems?", "possible_answers": ["NP-Optimization problems ask for the best solution, while NP-Decision problems ask if a solution exists", "NP-Optimization problems are easier to solve than NP-Decision problems", "NP-Decision problems ask if a solution exists, while NP-Optimization problems ask for the best solution", "There is no difference between NP-Decision and NP-Optimization problems", "NP-Decision problems are easier to solve than NP-Optimization problems"], "index": 2}, {"question": "What is the relationship between P and NP?", "possible_answers": ["NP is a subset of P", "P = NP", "P is a subset of NP", "We don't know the relationship between P and NP", "P \u2260 NP"], "index": 3}, {"question": "Circuit SAT", "possible_answers": ["Ask if there is some object that satisfies a polynomial time -checkable property", "Topics: Huffman codes, MSTs, Dynamic Programming, LCSS/Knapsack/CMM/All -pairs shortest path/MIS in trees/Travelling salesman", "Maximize the number of variables with value 0", "Given a circuit C with several Boolean inputs and one Boolean output, determine if there is a set of inputs that give output 1"], "index": 3}], "title": "NP Completeness and NP Hardness", "id": "3RZOU"}
{"summary": "**Main Points**\n\n**NP-Completeness**\n\n- **Definition of NP-Complete:** Problems in NP that are at least as hard as any other problem in NP.\n\n- **Reductions:** A method for proving that one problem is at least as hard as another by constructing a polynomial-time algorithm that converts instances of the first problem into instances of the second problem.\n\n- **First NP-Complete Problem:** Circuit SAT, which asks if there is a set of inputs that gives output 1 for a given Boolean circuit.\n\n**NP Problems**\n\n- **Definition of NP:** Problems that can be solved by a nondeterministic Turing machine in polynomial time.\n\n- **Decision Problems:** Ask if there exists an object that satisfies a polynomial-time-checkable property.\n\n- **Optimization Problems:** Ask for an object that maximizes or minimizes some polynomial-time-computable objective.\n\n- **Examples of NP Problems:** SAT, Hamiltonian Cycle, Knapsack, Maximum Independent Set\n\n**Brute Force Algorithms**\n\n- **Definition:** Na\u00efve algorithms that consider every possible answer and return the best one.\n\n- **Examples:** Searching for a path in a graph, finding the longest common subsequence, finding the closest pair of points, and determining if a graph has a topological ordering.\n\n- **Limitations:** Usually inefficient compared to better algorithms.\n\n**P vs. NP**\n\n- **Definition of P:** Set of decision problems that can be solved by a deterministic Turing machine in polynomial time.\n\n- **Millennium Problem:** Is P = NP?\n\n- **Conjecture:** P \u2260 NP, meaning that some NP problems are fundamentally difficult.\n\n**Hard Problems**\n\n- **Definition:** Problems that appear to be difficult in practice, despite decades of research.\n\n- **Challenges:** Determining if a problem is hard, proving hardness is extremely difficult.", "flash_cards": [["Homework 5 due today", "-Q3:You should notassume that theTiare\nincreasin g"], ["Exam 3 next week", "-Same format\n-Topics:\n\t-Huffman codes\n\t-MSTs\n\t-Dynamic Programming\n\t-LCSS/Knapsack/CMM/All -pairs shortest path/MIS in \ntrees/Travelling salesman"], ["NP Problems and NP completeness", "NP-Completeness (Ch 8)\n-NP-Problems\n-Reductions\n-NP-Completeness & NP -Hardness\n-SAT\n-Hamiltonian Cycle\n-Zero -One Equations\n-Knapsack"], ["Brute Force Algorithms", "For almost every problem we have seen there \nhas been a (usually bad) na\u00efve algorithm that \njust considers every possible answer and \nreturns the best one."], ["NP", "Such problems are said to be in Nondeterministic \nPolynomial time (NP)."], ["NP-Decision problems", "NP-Decision problems ask if there is some object that \nsatisfies a polynomial time -checkable property."], ["Optimization vs. Decision", "Note that these are not too different.\n-Every decision problem can be phrased as an \noptimization problem (objective has value 1 if \nthe object satisfies the condition and 0 \notherwise).\n-Every optimization problem has a decision \nform (can we find an example whose \nobjective is more than x)."], ["Examples of NP Problems", "-SAT\n-TSP\n-Hamiltonian Cycle\n-Knapsack\n-Maximum Independent Set"], ["SAT", "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean \nvariables, is there an assignment to the \nvariables that causes the formula to be true?"], ["Hamiltonian Cycle", "Given an undirected graph G is there a cycle \nthat visits every vertex exactly once?"]], "quiz": [{"question": "Which of the following is NOT a method for proving that one problem is at least as hard as another?", "possible_answers": ["Prove that it is hard", "Relate its difficulty to that of other problems", "Use reductions", "Search for algorithms"], "index": 3}, {"question": "Which of the following is NOT an NP-Complete problem?", "possible_answers": ["Maximum Independent Set", "Floyd-Warshall algorithm", "Circuit SAT", "Formula SAT"], "index": 1}, {"question": "Note that these are not too different.\n-Every decision problem can be phrased as an \noptimization problem (objective has value 1 if \nthe object satisfies the condition and 0 \notherwise).\n-Every optimization problem has a decision \nform (can we find an example whose \nobjective is more than x).", "possible_answers": ["NP Problems and NP completeness", "NP", "Optimization vs. Decision", "NP-Decision problems"], "index": 2}, {"question": "NP", "possible_answers": ["-Same format\n-Topics:\n\t-Huffman codes\n\t-MSTs\n\t-Dynamic Programming\n\t-LCSS/Knapsack/CMM/All -pairs shortest path/MIS in \ntrees/Travelling salesman", "NP-Completeness (Ch 8)\n-NP-Problems\n-Reductions\n-NP-Completeness & NP -Hardness\n-SAT\n-Hamiltonian Cycle\n-Zero -One Equations\n-Knapsack", "Given an undirected graph G is there a cycle \nthat visits every vertex exactly once?", "Such problems are said to be in Nondeterministic \nPolynomial time (NP)."], "index": 3}, {"question": "NP-Completeness (Ch 8)\n-NP-Problems\n-Reductions\n-NP-Completeness & NP -Hardness\n-SAT\n-Hamiltonian Cycle\n-Zero -One Equations\n-Knapsack", "possible_answers": ["NP Problems and NP completeness", "Brute Force Algorithms", "NP-Decision problems", "Exam 3 next week"], "index": 0}, {"question": "If an algorithm is developed that solves an NP-Complete problem in polynomial time, what would be the implications?", "possible_answers": ["The algorithm must be incorrect.", "NP-Complete problems are not as difficult as previously thought.", "P = NP", "There would be no significant implications."], "index": 2}, {"question": "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean \nvariables, is there an assignment to the \nvariables that causes the formula to be true?", "possible_answers": ["Optimization vs. Decision", "SAT", "Examples of NP Problems", "NP-Decision problems"], "index": 1}, {"question": "In a reduction A \u2192 B, what is the purpose of the hypothetical algorithm for B?", "possible_answers": ["None of the above", "To reduce instances of A to B", "To interpret the solution to B as a solution to A", "To solve instances of problem B"], "index": 2}, {"question": "What is the difference between an NP-Decision problem and an NP-Optimization problem?", "possible_answers": ["NP-Optimization problems ask if there is an object that satisfies a polynomial time-checkable property, while NP-Decision problems ask for the object that maximizes or minimizes some polynomial time-computable objective.", "There is no difference between the two types of problems.", "NP-Decision problems ask if there is an object that satisfies a polynomial time-checkable property, while NP-Optimization problems ask for the object that maximizes or minimizes some polynomial time-computable objective.", "NP-Decision problems are more difficult than NP-Optimization problems."], "index": 2}, {"question": "Exam 3 next week", "possible_answers": ["-Same format\n-Topics:\n\t-Huffman codes\n\t-MSTs\n\t-Dynamic Programming\n\t-LCSS/Knapsack/CMM/All -pairs shortest path/MIS in \ntrees/Travelling salesman", "Given an undirected graph G is there a cycle \nthat visits every vertex exactly once?", "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean \nvariables, is there an assignment to the \nvariables that causes the formula to be true?", "Such problems are said to be in Nondeterministic \nPolynomial time (NP)."], "index": 0}, {"question": "True or False: If P = NP, then every NP problem has a reasonably efficient solution.", "possible_answers": ["True", "False"], "index": 1}, {"question": "Examples of NP Problems", "possible_answers": ["-Q3:You should notassume that theTiare\nincreasin g", "-SAT\n-TSP\n-Hamiltonian Cycle\n-Knapsack\n-Maximum Independent Set", "Note that these are not too different.\n-Every decision problem can be phrased as an \noptimization problem (objective has value 1 if \nthe object satisfies the condition and 0 \notherwise).\n-Every optimization problem has a decision \nform (can we find an example whose \nobjective is more than x).", "-Same format\n-Topics:\n\t-Huffman codes\n\t-MSTs\n\t-Dynamic Programming\n\t-LCSS/Knapsack/CMM/All -pairs shortest path/MIS in \ntrees/Travelling salesman"], "index": 1}, {"question": "Which of the following is NOT a characteristic of NP-Complete problems?", "possible_answers": ["They have no known polynomial time algorithm", "They are at least as hard as any other problem in NP", "They can be solved in polynomial time", "They are in NP"], "index": 2}, {"question": "NP-Decision problems", "possible_answers": ["Problem: Formula -SAT\nGiven a logical formula in a number of Boolean \nvariables, is there an assignment to the \nvariables that causes the formula to be true?", "For almost every problem we have seen there \nhas been a (usually bad) na\u00efve algorithm that \njust considers every possible answer and \nreturns the best one.", "NP-Decision problems ask if there is some object that \nsatisfies a polynomial time -checkable property.", "NP-Completeness (Ch 8)\n-NP-Problems\n-Reductions\n-NP-Completeness & NP -Hardness\n-SAT\n-Hamiltonian Cycle\n-Zero -One Equations\n-Knapsack"], "index": 2}, {"question": "What is the significance of the Circuit SAT problem in NP-Completeness theory?", "possible_answers": ["Any NP decision problem can be reduced to it.", "It is the easiest NP-Complete problem.", "It is the first known NP-Complete problem.", "It has no known polynomial time algorithm."], "index": 0}, {"question": "Hamiltonian Cycle", "possible_answers": ["-SAT\n-TSP\n-Hamiltonian Cycle\n-Knapsack\n-Maximum Independent Set", "Given an undirected graph G is there a cycle \nthat visits every vertex exactly once?", "NP-Decision problems ask if there is some object that \nsatisfies a polynomial time -checkable property.", "For almost every problem we have seen there \nhas been a (usually bad) na\u00efve algorithm that \njust considers every possible answer and \nreturns the best one."], "index": 1}, {"question": "Which of the following are NP-Decision problems?", "possible_answers": ["Maximum Independent Set", "Travelling Salesman", "SAT", "Hamiltonian Cycle", "General Knapsack"], "index": 2}, {"question": "-Q3:You should notassume that theTiare\nincreasin g", "possible_answers": ["Exam 3 next week", "Homework 5 due today", "Hamiltonian Cycle", "SAT"], "index": 1}, {"question": "True or False: NP-Hard problems are always NP-Complete problems.", "possible_answers": ["False", "True"], "index": 0}, {"question": "For almost every problem we have seen there \nhas been a (usually bad) na\u00efve algorithm that \njust considers every possible answer and \nreturns the best one.", "possible_answers": ["Examples of NP Problems", "Brute Force Algorithms", "SAT", "NP"], "index": 1}], "title": "NP Problems and NP Completeness", "id": "oSBgI"}
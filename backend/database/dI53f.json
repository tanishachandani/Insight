{"summary": "**Overview**\n\nThe transcript covers nondeterministic polynomial time (NP) problems and NP-completeness.\n\n**NP-Problems**\n\n* **Definition:** Problems where there exists a nondeterministic algorithm that can verify a solution in polynomial time.\n* **Examples:** SAT, TSP, Hamiltonian cycle, knapsack, maximum independent set\n\n**Reductions**\n\n* **Definition:** A way to prove that one problem is at least as hard as another.\n* **Method:** Show that if there is an algorithm to solve problem B, then it can be used to solve problem A.\n\n**NP-Completeness and NP-Hardness**\n\n* **NP-Complete:** An NP problem that is at least as hard as every other NP problem.\n* **NP-Hard:** An optimization problem that is at least as hard as every other NP-optimization problem.\n\n**SAT (Satisfiability)**\n\n* **Problem:** Given a logical formula, determine if there is an assignment to the variables that makes the formula true.\n* **NP-Complete:** Any NP problem can be reduced to SAT.\n\n**Hamiltonian Cycle**\n\n* **Problem:** Given a graph, determine if there is a cycle that visits every vertex exactly once.\n* **NP-Complete:** Hamiltonian cycle is equivalent to TSP with a specific edge weighting scheme.\n\n**Zero-One Equations**\n\n* **Problem:** Given a set of linear equations with binary variables, determine if there is a solution.\n* **NP-Complete:** Zero-one equations can be used to encode SAT.\n\n**Knapsack**\n\n* **Problem:** Given a set of items with weights and values, find the subset that maximizes the total value without exceeding a weight limit.\n* **NP-Complete:** General knapsack, where weights can be arbitrarily large, is NP-complete.\n\n**Brute Force Algorithms**\n\n* **Definition:** Algorithms that consider every possible solution and return the best one.\n* **Limitations:** Usually inefficient for NP problems.\n\n**P vs. NP**\n\n* **Million-Dollar Question:** Is every NP problem solvable in polynomial time?\n* **Most Computer Scientists Believe:** P \u2260 NP, meaning there are NP problems that are fundamentally difficult.\n\n**Hard Problems and Reductions**\n\n* **Identifying Hard Problems:** Can use reductions or attempt to prove hardness (very difficult).\n* **Hamiltonian Cycle to TSP Reduction:** Shows that TSP is at least as hard as Hamiltonian cycle.\n\n**Circuit SAT**\n\n* **Problem:** Given a Boolean circuit, determine if there is an input that outputs 1.\n* **NP-Complete:** Any NP decision problem can be reduced to circuit SAT.", "flash_cards": [["Homework 5 due today", "-Q3:You should notassume that theTiare\nincreasin g"], ["Exam 3 next week", "-Same format\n-Topics:\n\t-Huffman codes\n\t-MSTs\n\t-Dynamic Programming\n\t-LCSS/Knapsack/CMM/All -pairs shortest path/MIS in \ntrees/Travelling salesman"], ["NP problems", "-NP-Completeness (Ch 8)\n-NP -Problems\n-Reductions\n-NP-Completeness & NP -Hardness\n-SAT\n-Hamiltonian Cycle\n-Zero -One Equations\n-Knapsack"], ["Brute Force Algorithms", "For almost every problem we have seen there \nhas been a (usually bad) na\u00efve algorithm that \njust considers every possible answer and \nreturns the best one."], ["NP", "Such problems are said to be in Nondeterministic \nPolynomial time (NP)."], ["NP-Decision problems", "NP-Decision problems ask if there is some object that \nsatisfies a polynomial time -checkable property."], ["Optimization vs. Decision", "Note that these are not too different.\n-Every decision problem can be phrased as an \noptimization problem (objective has value 1 if \nthe object satisfies the condition and 0 \notherwise).\n-Every optimization problem has a decision \nform (can we find an example whose \nobjective is more than x)."], ["Examples of NP Problems", "-SAT\n-TSP\n-Hamiltonian Cycle\n-Knapsack\n-Maximum Independent Set"], ["SAT", "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean \nvariables, is there an assignment to the \nvariables that causes the formula to be true?"], ["SAT Applications", "-Circuit Design\n-Logic Puzzles\n-Cryptanalysis"]], "quiz": [{"question": "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean \nvariables, is there an assignment to the \nvariables that causes the formula to be true?", "possible_answers": ["Homework 5 due today", "Exam 3 next week", "SAT", "NP-Decision problems"], "index": 2}, {"question": "What is the name of the first NP-Complete problem?", "possible_answers": ["Circuit SAT", "Maximum Independent Set", "Formula SAT", "Hamiltonian Cycle", "Knapsack"], "index": 0}, {"question": "-Same format\n-Topics:\n\t-Huffman codes\n\t-MSTs\n\t-Dynamic Programming\n\t-LCSS/Knapsack/CMM/All -pairs shortest path/MIS in \ntrees/Travelling salesman", "possible_answers": ["SAT Applications", "Optimization vs. Decision", "Examples of NP Problems", "Exam 3 next week"], "index": 3}, {"question": "What is a Reduction?", "possible_answers": ["A method for reducing the running time of an algorithm.", "A method for converting an NP-Hard problem into an NP-Complete problem.", "A method for proving that one problem is at least as hard as another.", "A method for finding polynomial time algorithms for NP-Complete problems.", "A method for solving NP-Complete problems using brute force search."], "index": 2}, {"question": "What is the $1,000,000 Question?", "possible_answers": ["Is P = NP?", "Is TSP NP-Complete?", "Is Knapsack NP-Complete?", "Is Hamiltonian Cycle NP-Hard?", "Is SAT NP-Hard?"], "index": 0}, {"question": "Which of the following are NP-Decision problems?", "possible_answers": ["Hamiltonian Cycle", "SAT", "General Knapsack", "Maximum Independent Set", "Travelling Salesman"], "index": 1}, {"question": "Which of the following is a NP-Optimization problem?", "possible_answers": ["TSP", "SAT", "Hamiltonian Cycle", "Maximum Independent Set", "Knapsack"], "index": 0}, {"question": "NP", "possible_answers": ["For almost every problem we have seen there \nhas been a (usually bad) na\u00efve algorithm that \njust considers every possible answer and \nreturns the best one.", "Such problems are said to be in Nondeterministic \nPolynomial time (NP).", "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean \nvariables, is there an assignment to the \nvariables that causes the formula to be true?", "-Circuit Design\n-Logic Puzzles\n-Cryptanalysis"], "index": 1}, {"question": "Examples of NP Problems", "possible_answers": ["Such problems are said to be in Nondeterministic \nPolynomial time (NP).", "-Q3:You should notassume that theTiare\nincreasin g", "-NP-Completeness (Ch 8)\n-NP -Problems\n-Reductions\n-NP-Completeness & NP -Hardness\n-SAT\n-Hamiltonian Cycle\n-Zero -One Equations\n-Knapsack", "-SAT\n-TSP\n-Hamiltonian Cycle\n-Knapsack\n-Maximum Independent Set"], "index": 3}, {"question": "NP-Decision problems", "possible_answers": ["For almost every problem we have seen there \nhas been a (usually bad) na\u00efve algorithm that \njust considers every possible answer and \nreturns the best one.", "Such problems are said to be in Nondeterministic \nPolynomial time (NP).", "-Same format\n-Topics:\n\t-Huffman codes\n\t-MSTs\n\t-Dynamic Programming\n\t-LCSS/Knapsack/CMM/All -pairs shortest path/MIS in \ntrees/Travelling salesman", "NP-Decision problems ask if there is some object that \nsatisfies a polynomial time -checkable property."], "index": 3}, {"question": "What is the name of the problem that asks if there is a cycle that visits every vertex in a graph exactly once?", "possible_answers": ["Hamiltonian Cycle", "Eulerian Cycle", "Traveling Salesman", "Minimum Spanning Tree", "Shortest Path"], "index": 0}, {"question": "SAT Applications", "possible_answers": ["-Q3:You should notassume that theTiare\nincreasin g", "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean \nvariables, is there an assignment to the \nvariables that causes the formula to be true?", "For almost every problem we have seen there \nhas been a (usually bad) na\u00efve algorithm that \njust considers every possible answer and \nreturns the best one.", "-Circuit Design\n-Logic Puzzles\n-Cryptanalysis"], "index": 3}, {"question": "What is the NP-Complete problem that is equivalent to asking if there is a set of inputs that give output 1 for a given circuit?", "possible_answers": ["Knapsack", "Circuit SAT", "Hamiltonian Cycle", "Formula SAT", "Maximum Independent Set"], "index": 1}, {"question": "Which of the following is NOT NP-Complete?", "possible_answers": ["Formula SAT", "Circuit SAT", "Maximum Independent Set", "Minimum Spanning Tree", "Hamiltonian Cycle"], "index": 3}, {"question": "Brute Force Algorithms", "possible_answers": ["NP-Decision problems ask if there is some object that \nsatisfies a polynomial time -checkable property.", "Such problems are said to be in Nondeterministic \nPolynomial time (NP).", "-NP-Completeness (Ch 8)\n-NP -Problems\n-Reductions\n-NP-Completeness & NP -Hardness\n-SAT\n-Hamiltonian Cycle\n-Zero -One Equations\n-Knapsack", "For almost every problem we have seen there \nhas been a (usually bad) na\u00efve algorithm that \njust considers every possible answer and \nreturns the best one."], "index": 3}, {"question": "Homework 5 due today", "possible_answers": ["-SAT\n-TSP\n-Hamiltonian Cycle\n-Knapsack\n-Maximum Independent Set", "-Q3:You should notassume that theTiare\nincreasin g", "Such problems are said to be in Nondeterministic \nPolynomial time (NP).", "Note that these are not too different.\n-Every decision problem can be phrased as an \noptimization problem (objective has value 1 if \nthe object satisfies the condition and 0 \notherwise).\n-Every optimization problem has a decision \nform (can we find an example whose \nobjective is more than x)."], "index": 1}, {"question": "NP problems", "possible_answers": ["NP-Decision problems ask if there is some object that \nsatisfies a polynomial time -checkable property.", "-NP-Completeness (Ch 8)\n-NP -Problems\n-Reductions\n-NP-Completeness & NP -Hardness\n-SAT\n-Hamiltonian Cycle\n-Zero -One Equations\n-Knapsack", "-SAT\n-TSP\n-Hamiltonian Cycle\n-Knapsack\n-Maximum Independent Set", "Problem: Formula -SAT\nGiven a logical formula in a number of Boolean \nvariables, is there an assignment to the \nvariables that causes the formula to be true?"], "index": 1}, {"question": "Note that these are not too different.\n-Every decision problem can be phrased as an \noptimization problem (objective has value 1 if \nthe object satisfies the condition and 0 \notherwise).\n-Every optimization problem has a decision \nform (can we find an example whose \nobjective is more than x).", "possible_answers": ["Optimization vs. Decision", "NP", "NP problems", "SAT Applications"], "index": 0}, {"question": "True or False: Every NP problem has a better-than-brute-force algorithm.", "possible_answers": ["False", "True"], "index": 0}, {"question": "What is the name of the algorithm that finds the longest common subsequence of two strings?", "possible_answers": ["Brute Force Search", "Greedy Algorithm", "Longest Common Subsequence", "Dynamic Programming", "Divide and Conquer"], "index": 2}], "title": "NP-Completeness and Reductions", "id": "dI53f"}